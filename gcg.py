import os
import sys
import argparse
from functions import *

version = "v1.0.0-beta"
# Comment header that will be append to the g-code.
header = "; This file is generated by the GCG " + version + ". All rights reserved.\n\n"

if __name__ == "__main__":

    # Descritption
    DES = "The GCG is tool to convert a gcg file to g-code source file."
    # Epilog
    EP = "If you have any issues then report on github: https://github.com/TheKruger/gcg."
    EP += f"\n\nExample:\n\tpython {sys.argv[0]} -f file.gc -o file.gc"

    parser = argparse.ArgumentParser(epilog=EP, description=DES, formatter_class=argparse.RawDescriptionHelpFormatter)

    # Arguments
    parser.add_argument("-f", "--file", dest="file", help="GCG source file.")
    parser.add_argument("-o", "--output", dest="output", help=f"Output file (default {lgreen}out.nc{white}).", default="out.nc")
    parser.add_argument("-v", "--verbose", dest="verbose", help="Increase verbosity level.", action="count", default=0)
    parser.add_argument("-V", "--version", dest="version", help="Show the version and exit.", action="store_true")
    parser.add_argument("-H", "--no-header", dest="noheader", help="Don't put header text to the output file.", action="store_true")
    parser.add_argument("-c", "--commands", dest="commands", help=f"Load a json file with your own definition. (default: {lgreen}commands.json{white})", default="commands.json")
    parser.add_argument("-C", "--comments", dest="comments", help="Add comments to the gcode source file.", action="store_true")
    
    args = parser.parse_args()

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)
    else:

        gcode = ""

        # Print the verions and exit.
        if args.version:
            print("GCG version:", version)
            sys.exit()

        if args.file:

            # Check if commands file is exists.
            if not os.path.exists(args.commands):
                error("Commands file not exists.")
                sys.exit(0)

            # Check if input file is exists.
            if not os.path.exists(args.file):
                error("Input file not exists.")
                sys.exit(1)

            if not args.noheader:
                gcode += header

            # Load the tokens.
            tokens = load_commands(args.commands)
            if args.verbose > 1:
                info("Commands loaded.")
            # Load the source code.
            if args.verbose > 1:
                info("Source code loaded.")
            code = load(args.file)
            # Append
            if args.verbose >= 1:
                info("Generating g-code...")
            gcode += convert_to_gcode(code, tokens, args.comments)

            # Write the g-code to the output file.
            create_gcode_file(args.output, gcode)
            if args.verbose >= 1:
                info("G-code successfully generated.")